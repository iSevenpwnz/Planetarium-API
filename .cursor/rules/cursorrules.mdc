---
description: 
globs: 
alwaysApply: false
---
Основні правила для розробки Planetarium API (Cursor)
1. Архітектура та структура
Кожна сутність (шоу, купол, сесія, квиток, бронювання, тема) — окремий Django app.
Всі моделі, серіалізатори, в’юхи, url-и — у відповідних apps.
Всі бізнес-правила (наприклад, перевірка зайнятих місць) — у моделях або сервісах, а не у в’юхах.
Всі API — через DRF ViewSet-и (ModelViewSet, якщо CRUD), для простих — GenericAPIView/FBV.
Всі фільтрації, пошук, пагінація — через DRF-фільтри, django-filter, стандартні механізми DRF.
2. DRY та відсутність дублювання
Не дублювати логіку: спільні серіалізатори, міксини, базові класи для спільних в’юх.
Валідація — через Model.clean(), Serializer.validate(), або окремі сервіси.
Всі константи, choices, повідомлення про помилки — виносити в окремі файли (constants.py, errors.py).
3. Оптимізація запитів
Для всіх ViewSet-ів, де є ForeignKey/M2M — використовувати select_related, prefetch_related.
Не робити зайвих запитів у циклах (N+1).
Для підрахунку доступних місць — використовувати annotate, aggregate, Subquery, а не ручний підрахунок у Python.
Кешування — через Django cache framework (наприклад, для списків шоу, доступних місць).
4. Стиль коду та якість
Весь код має проходити flake8, isort, black (PEP8).
Імена змінних, функцій — зрозумілі, англійською, snake_case.
Докстрінги для всіх класів, методів, функцій.
Всі в’юхи — CBV, якщо логіка складна; FBV — тільки для дуже простих endpoint-ів.
Всі тести — через pytest, pytest-django, покриття не менше 80%.
5. Безпека та доступи
Всі ендпоінти — через DRF permissions, IsAuthenticated, IsAdminUser, кастомні permissions для власників.
JWT — тільки через DRF SimpleJWT.
Всі дані користувача — тільки для власника (бронювання, квитки).
Валідація даних — тільки через DRF serializers, не в ручну.
6. Документація та підтримка
Всі endpoint-и — описані через drf-yasg (Swagger).

README.md — короткий опис, як підняти проект, як запускати тести, як додавати нові моделі/endpoint-и.